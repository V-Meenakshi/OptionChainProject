{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOjnzPBtlVDYWEZ7UTZsRAW",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/V-Meenakshi/OptionChainProject/blob/main/mockDataCode\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WY9WamDI4gSv",
        "outputId": "019ac596-d20f-48e0-bc86-5bf9053f8bd0"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (2.2.2)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (2.32.3)\n",
            "Requirement already satisfied: numpy>=1.22.4 in /usr/local/lib/python3.10/dist-packages (from pandas) (1.26.4)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2024.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.10/dist-packages (from pandas) (2024.2)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests) (3.4.0)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests) (2.2.3)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests) (2024.8.30)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.2->pandas) (1.16.0)\n"
          ]
        }
      ],
      "source": [
        "!pip install pandas requests"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Import libraries\n",
        "import pandas as pd\n",
        "import requests\n",
        "\n",
        "# Define a function to fetch option chain data\n",
        "def get_option_chain_data(instrument_name: str, expiry_date: str, side: str) -> pd.DataFrame:\n",
        "    \"\"\"\n",
        "    Fetches the option chain data for a given instrument and expiry date, returning the highest bid/ask price\n",
        "    based on the 'side' (PE for put, CE for call).\n",
        "\n",
        "    Parameters:\n",
        "    - instrument_name (str): Name of the instrument (e.g., 'NIFTY' or 'BANKNIFTY').\n",
        "    - expiry_date (str): Expiration date of the options in YYYY-MM-DD format.\n",
        "    - side (str): Option type ('PE' for Put, 'CE' for Call).\n",
        "\n",
        "    Returns:\n",
        "    - pd.DataFrame: DataFrame containing instrument, strike price, side, and bid/ask price.\n",
        "    \"\"\"\n",
        "    # Placeholder API URL; replace with actual endpoint.\n",
        "    url = f\"https://api.example.com/options?instrument={instrument_name}&expiry={expiry_date}\"\n",
        "    headers = {\"Authorization\": \"Bearer YOUR_API_KEY\"}  # Replace with actual API key.\n",
        "\n",
        "    # Placeholder response for demonstration. Replace this with `data = response.json()` in actual implementation\n",
        "    mock_data = [\n",
        "        {\"strike_price\": 19500, \"PE_bid\": 0.65, \"CE_ask\": 2302.25},\n",
        "        {\"strike_price\": 19600, \"PE_bid\": 0.80, \"CE_ask\": 2200.50}\n",
        "    ]\n",
        "\n",
        "    # Extract relevant data\n",
        "    processed_data = []\n",
        "    for item in mock_data:\n",
        "        strike_price = item[\"strike_price\"]\n",
        "        price = item[f\"{side}_bid\"] if side == \"PE\" else item[f\"{side}_ask\"]\n",
        "        processed_data.append({\"instrument_name\": instrument_name, \"strike_price\": strike_price, \"side\": side, \"bid/ask\": price})\n",
        "\n",
        "    return pd.DataFrame(processed_data)\n",
        "\n",
        "# Define a function to calculate margin and premium\n",
        "def calculate_margin_and_premium(data: pd.DataFrame) -> pd.DataFrame:\n",
        "    \"\"\"\n",
        "    Calculates the margin requirement and premium earned for each option in the DataFrame.\n",
        "\n",
        "    Parameters:\n",
        "    - data (pd.DataFrame): DataFrame from `get_option_chain_data` function.\n",
        "\n",
        "    Returns:\n",
        "    - pd.DataFrame: Modified DataFrame with added columns 'margin_required' and 'premium_earned'.\n",
        "    \"\"\"\n",
        "    lot_size = 20  # Set appropriate lot size for the instrument\n",
        "    margin_factor = 150  # Mock value; replace with API data if needed\n",
        "\n",
        "    # Add margin and premium calculations to DataFrame\n",
        "    data['margin_required'] = data['bid/ask'] * margin_factor  # Replace with actual API call for margin if needed\n",
        "    data['premium_earned'] = data['bid/ask'] * lot_size\n",
        "\n",
        "    return data\n",
        "\n",
        "# Example usage\n",
        "# Fetch data\n",
        "data = get_option_chain_data(\"NIFTY\", \"2024-12-31\", \"PE\")\n",
        "print(\"Option Chain Data:\\n\", data)\n",
        "\n",
        "# Calculate margin and premium\n",
        "updated_data = calculate_margin_and_premium(data)\n",
        "print(\"\\nUpdated Data with Margin and Premium:\\n\", updated_data)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nb7KvqVy46rw",
        "outputId": "0c187a14-fc8c-48b0-aa99-28df441488dc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Option Chain Data:\n",
            "   instrument_name  strike_price side  bid/ask\n",
            "0           NIFTY         19500   PE     0.65\n",
            "1           NIFTY         19600   PE     0.80\n",
            "\n",
            "Updated Data with Margin and Premium:\n",
            "   instrument_name  strike_price side  bid/ask  margin_required  premium_earned\n",
            "0           NIFTY         19500   PE     0.65             97.5            13.0\n",
            "1           NIFTY         19600   PE     0.80            120.0            16.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "T9ndFQOs8l2F"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}